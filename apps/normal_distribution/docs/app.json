[{"name": "app.py", "content": "# app.py\n\nfrom shiny import App, ui, reactive, render\nfrom shinywidgets import output_widget, render_widget\nimport plotly.graph_objects as go\nimport numpy as np\nimport pandas as pd\nfrom scipy.stats import norm\n\napp_ui = ui.page_fluid(\n    ui.panel_title(\"The Normal Distribution\"),\n    ui.navset_tab(\n        ui.nav_panel(\"Explore Distribution\",\n            ui.layout_sidebar(\n                ui.sidebar(\n                    ui.input_slider(\"mu_slider\", \"Mean (\u03bc)\", min=-10, max=10, value=0, step=0.1),\n                    ui.input_slider(\"sigma_slider\", \"Standard Deviation (\u03c3)\", min=0.1, max=5, value=1, step=0.1),\n                    ui.input_checkbox(\"use_inputs\", \"Enter numbers for \u03bc and \u03c3\", value=False),\n                    ui.panel_conditional(\n                        \"input.use_inputs\",\n                        ui.input_numeric(\"mu_text\", \"\u03bc\", value=0, step=0.1),\n                        ui.input_numeric(\"sigma_text\", \"\u03c3\", value=1, min=0.1, step=0.1)\n                    ),\n                    width=400\n                ),\n                    ui.tags.p(\"The normal distribution is a bell-shaped distribution. Its location and spread are determined by the two parameters \u03bc (the mean) and \u03c3 (the standard deviation).  Explore how the location and shape of the normal distribution depends on these two parameters by using the sliders below.\"),\n                    output_widget(\"dist_plot\", height=\"400px\"),\n                    ui.tags.p(\"The blue shaded areas show that 68% of a normal distribution falls within one standard deviation of the mean, i.e., between \u03bc - \u03c3 and \u03bc + \u03c3 (darkest shade), 95% fall within two standard deviations \u03bc \u00b1 2\u03c3, and 99.7% fall within three standard deviations \u03bc \u00b1 3\u03c3 (lightest shade).\"),\n                    ui.output_ui(\"interval_table\")\n            )\n        ),\n        ui.nav_panel(\"Find Probability\",\n            ui.layout_sidebar(\n                ui.sidebar(\n                    ui.input_numeric(\"mu_prob\", \"Mean (\u03bc):\", value=0),\n                    ui.input_numeric(\"sigma_prob\", \"Standard Deviation (\u03c3):\", value=1),\n                    ui.input_select(\"prob_type\", \"Type of Probability\", choices=[\n                        \"Lower Tail: P(X < x)\",\n                        \"Upper Tail: P(X > x)\",\n                        \"Interval: P(x\u2081 < X < x\u2082)\",\n                        \"Two-Tail: P(X < x\u2081) + P(X > x\u2082)\"\n                    ]),\n                    ui.panel_conditional(\n                        \"!input.prob_type.includes('Interval') && !input.prob_type.includes('Two-Tail')\",\n                        ui.input_numeric(\"x1_prob\", \"Value of x:\", value=-1.96)\n                    ),\n                    ui.panel_conditional(\n                        \"input.prob_type.includes('Interval') || input.prob_type.includes('Two-Tail')\",\n                        ui.input_numeric(\"x1_prob\", \"x\u2081:\", value=-1.96),\n                        ui.input_numeric(\"x2_prob\", \"x\u2082:\", value=1.96)\n                    ),\n                    width=400\n                ),\n                    output_widget(\"prob_plot\", height=\"400px\"),\n                    ui.output_ui(\"prob_table\")\n            )\n        ),\n        ui.nav_panel(\"Find Percentile\",\n            ui.layout_sidebar(\n                ui.sidebar(\n                    ui.input_numeric(\"mu_perc\", \"Mean (\u03bc):\", value=0),\n                    ui.input_numeric(\"sigma_perc\", \"Standard Deviation (\u03c3):\", value=1),\n                    ui.input_select(\"perc_type\", \"Type of Percentile\", choices=[\n                        \"Lower Tail: P(X < x)\",\n                        \"Upper Tail: P(X > x)\",\n                        \"Center: P(x\u2081 < X < x\u2082)\",\n                    ]),\n                    ui.input_text(\"x_value_perc\", \"Probability (in %):\", value=95),\n                    width=400\n                ),\n                    output_widget(\"perc_plot\", height=\"400px\"),\n                    ui.output_ui(\"perc_table\")\n            )\n        )\n    )\n)\n\ndef server(input, output, session):\n    @output\n    @render_widget\n    def dist_plot():\n        mu = input.mu_text() if input.use_inputs() else input.mu_slider()\n        sigma = input.sigma_text() if input.use_inputs() else input.sigma_slider()\n        x = np.linspace(mu - 4 * sigma, mu + 4 * sigma, 1000)\n        y = norm.pdf(x, mu, sigma)\n\n        fig = go.Figure()\n        fig.add_trace(go.Scatter(x=x, y=y, mode='lines', name='Normal Curve', line=dict(color='black')))\n\n        for z, color, label in reversed(list(zip([1, 2, 3], ['#2c7fb8', '#74a9cf', '#d0d1e6'], ['68%', '95%', '99.7%']))):\n            x_fill = np.linspace(mu - z * sigma, mu + z * sigma, 400)\n            y_fill = norm.pdf(x_fill, mu, sigma)\n            fig.add_trace(go.Scatter(\n                x=np.concatenate(([x_fill[0]], x_fill, [x_fill[-1]])),\n                y=np.concatenate(([0], y_fill, [0])),\n                fill='toself',\n                fillcolor=color,\n                line=dict(color='rgba(0,0,0,0)'),\n                name=label))\n\n        fig.update_layout(\n            title=f\"Normal Distribution (\u03bc={mu}, \u03c3={sigma})\",\n            xaxis_title=\"X\",\n            yaxis_title=\"Density\",\n            margin=dict(l=20, r=20, t=40, b=20)\n        )\n        return fig\n\n    @output\n    @render.ui\n    def interval_table():\n        mu = input.mu_text() if input.use_inputs() else input.mu_slider()\n        sigma = input.sigma_text() if input.use_inputs() else input.sigma_slider()\n        row1 = f\"<tr> <td align='center'> Interval: </td> <td align='center'> [{mu - sigma:.1f}, {mu + sigma:.1f}] </td> <td align='center'> [{mu - 2*sigma:.1f}, {mu + 2*sigma:.1f}] </td> <td align='center'> [{mu - 3*sigma:.1f}, {mu + 3*sigma:.1f}] </td> </tr>\"\n        row2 = \"<tr> <td align='center'> Percent: </td> <td align='center'> 68% </td> <td align='center'> 95% </td> <td align='center'> 99.7% </td> </tr>\"\n        html = f\"\"\"\n        <table class='table shiny-table table-hover spacing-s' style='width:auto;'>\n        <thead> <tr> <th align='center'> \u03bc = {mu}, \u03c3 = {sigma} </th> <th align='center'> \u03bc \u00b1 \u03c3 </th> <th align='center'> \u03bc \u00b1 2\u03c3 </th> <th align='center'> \u03bc \u00b1 3\u03c3 </th>  </tr> </thead>\n        <tbody>{row1}{row2}</tbody>\n        </table>\n        \"\"\"\n        return ui.HTML(html)\n\n    @output\n    @render_widget\n    def prob_plot():\n        mu = input.mu_prob()\n        sigma = input.sigma_prob()\n        prob_type = input.prob_type()\n\n        x_range = np.linspace(mu - 4 * sigma, mu + 4 * sigma, 1000)\n        y_range = norm.pdf(x_range, mu, sigma)\n        fig = go.Figure()\n        fig.add_trace(go.Scatter(x=x_range, y=y_range, mode='lines', name='Normal Curve'))\n\n        x1 = input.x1_prob()\n        x2 = input.x2_prob() if hasattr(input, 'x2_prob') else None\n\n        prob = 'NA'\n\n        if 'Lower' in prob_type:\n            mask = x_range < x1\n            mask_2 = None\n            prob = norm.cdf(x1, mu, sigma)\n        elif 'Upper' in prob_type:\n            mask = x_range > x1\n            mask_2 = None\n            prob = 1 - norm.cdf(x1, mu, sigma)\n        elif 'Interval' in prob_type and x2 is not None:\n            mask = (x_range > x1) & (x_range < x2)\n            mask_2 = None\n            prob = norm.cdf(x2, mu, sigma) - norm.cdf(x1, mu, sigma)\n        elif 'Two-Tail' in prob_type and x2 is not None:\n            x_low, x_high = sorted([x1, x2])\n            mask = x_range < x_low\n            mask_2 = x_range > x_high\n            prob = norm.cdf(x1, mu, sigma)\n            prob_2 = (1 - norm.cdf(x2, mu, sigma))\n        else:\n            mask = np.full_like(x_range, False, dtype=bool)\n            mask_2 = None\n\n        x_fill = x_range[mask]\n        x_fill_2 = x_range[mask_2]\n        y_fill = norm.pdf(x_fill, mu, sigma)\n        y_fill_2 = norm.pdf(x_fill_2, mu, sigma)\n\n        if mask_2 is not None:\n            fig.add_trace(go.Scatter(\n                x=np.concatenate([[x_fill_2[0]], x_fill_2, [x_fill_2[-1]]]),\n                y=np.concatenate([[0], y_fill_2, [0]]),\n                fill='toself', fillcolor='#64bdff', line=dict(color='rgba(0,0,0,0)'),\n                name=f'P = {prob_2:.4f}' if isinstance(prob_2, float) else 'Shaded Area'))\n\n        fig.add_trace(go.Scatter(\n                x=np.concatenate([[x_fill[0]], x_fill, [x_fill[-1]]]),\n                y=np.concatenate([[0], y_fill, [0]]),\n                fill='toself', fillcolor='#64bdff', line=dict(color='rgba(0,0,0,0)'),\n                name=f'P = {prob:.4f}' if isinstance(prob, float) else 'Shaded Area'))\n\n        fig.update_layout(\n            title=f\"Normal Distribution: {prob_type}\",\n            xaxis_title=\"X\",\n            yaxis_title=\"Density\",\n            margin=dict(l=20, r=20, t=40, b=20)\n        )\n        return fig\n\n    @output\n    @render.ui\n    def prob_table():\n        mu = input.mu_prob()\n        sigma = input.sigma_prob()\n        prob_type = input.prob_type()\n        x1 = input.x1_prob()\n        x2 = input.x2_prob() if hasattr(input, 'x2_prob') else None\n\n        if 'Lower' in prob_type:\n            prob = norm.cdf(x1, mu, sigma)\n            z = (x1 - mu) / sigma\n            prob_str = f\"P(X < {x1})\"\n        elif 'Upper' in prob_type:\n            prob = 1 - norm.cdf(x1, mu, sigma)\n            z = (x1 - mu) / sigma\n            prob_str = f\"P(X > {x1})\"\n        elif 'Interval' in prob_type and x2 is not None:\n            prob = norm.cdf(x2, mu, sigma) - norm.cdf(x1, mu, sigma)\n            z = f\"{(x1 - mu) / sigma:.2f}, {(x2 - mu) / sigma:.2f}\"\n            prob_str = f\"P({x1} < X < {x2})\"\n        elif 'Two-Tail' in prob_type and x2 is not None:\n            prob = norm.cdf(x1, mu, sigma) + (1 - norm.cdf(x2, mu, sigma))\n            z = f\"{(x1 - mu) / sigma:.2f}, {(x2 - mu) / sigma:.2f}\"\n            prob_str = f\"P(X < {x1}) + P(X > {x2})\"\n        else:\n            prob = 'NA'\n            z = 'NA'\n            prob_str = \"Invalid Input\"\n\n        html = f\"\"\"\n        <table class='table shiny-table table-hover spacing-s' style='width:auto;'>\n        <thead>\n        <tr>\n            <th style='text-align: center;'> Mean \u03bc </th>\n            <th style='text-align: center;'> Std. Dev. \u03c3 </th>\n            <th style='text-align: center;'> Value(s) </th>\n            <th style='text-align: center;'> Probability<br>{prob_str} </th>\n            <th style='text-align: center;'> z-Score </th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <td align='center'>{mu}</td>\n            <td align='center'>{sigma}</td>\n            <td align='center'>{x1 if 'Upper' in prob_type or 'Lower' in prob_type else f'{x1}, {x2}'}</td>\n            <td align='center'>{prob if isinstance(prob, str) else round(prob, 4)}</td>\n            <td align='center'>{z}</td>\n        </tr>\n        </tbody>\n        </table>\n        \"\"\"\n        return ui.HTML(html)\n\n    @output\n    @render_widget\n    def perc_plot():\n        mu = input.mu_perc()\n        sigma = input.sigma_perc()\n        perc_type = input.perc_type()\n\n        try:\n            p = float(input.x_value_perc()) / 100\n        except:\n            p = 0.95\n\n        x_range = np.linspace(mu - 4 * sigma, mu + 4 * sigma, 1000)\n        y_range = norm.pdf(x_range, mu, sigma)\n        fig = go.Figure()\n        fig.add_trace(go.Scatter(x=x_range, y=y_range, mode='lines', name='Normal Curve'))\n\n        if 'Lower' in perc_type:\n            x_val = norm.ppf(p, mu, sigma)\n            mask = x_range < x_val\n        elif 'Upper' in perc_type:\n            x_val = norm.ppf(1 - p, mu, sigma)\n            mask = x_range > x_val\n        elif 'Center' in perc_type:\n            x_low = norm.ppf((1 - p) / 2, mu, sigma)\n            x_high = norm.ppf((1 + p) / 2, mu, sigma)\n            x_low, x_high = sorted([x_low, x_high])\n            mask = (x_range > x_low) & (x_range < x_high)\n        else:\n            mask = np.full_like(x_range, False, dtype=bool)\n\n        x_fill = x_range[mask]\n        y_fill = norm.pdf(x_fill, mu, sigma)\n\n        if len(x_fill) > 0:\n            fig.add_trace(go.Scatter(\n                x=np.concatenate([[x_fill[0]], x_fill, [x_fill[-1]]]),\n                y=np.concatenate([[0], y_fill, [0]]),\n                fill='toself', fillcolor='#46C8B2', line=dict(color='rgba(0,0,0,0)'),\n                name=f'{p*100:.1f}% Area'))\n\n        fig.update_layout(\n            title=f\"Normal Distribution: {perc_type}\",\n            xaxis_title=\"X\",\n            yaxis_title=\"Density\",\n            margin=dict(l=20, r=20, t=40, b=20)\n        )\n        return fig\n\n    @output\n    @render.ui\n    def perc_table():\n        mu = input.mu_perc()\n        sigma = input.sigma_perc()\n        perc_type = input.perc_type()\n\n        try:\n            p = float(input.x_value_perc()) / 100\n        except:\n            p = 0.95\n\n        if 'Lower' in perc_type:\n            x = round(norm.ppf(p, mu, sigma), 4)\n            z = round((x - mu) / sigma, 4)\n            label = f\"P(X < x) = {p:.2f}\"\n        elif 'Upper' in perc_type:\n            x = round(norm.ppf(1 - p, mu, sigma), 4)\n            z = round((x - mu) / sigma, 4)\n            label = f\"P(X > x) = {p:.2f}\"\n        elif 'Center' in perc_type:\n            x1 = float(norm.ppf((1 - p) / 2, mu, sigma))\n            x2 = float(norm.ppf((1 + p) / 2, mu, sigma))\n            x = round(x1, 4), round(x2, 4)\n            z = round((x1 - mu)/sigma, 4), round((x2 - mu)/sigma, 4)\n            label = f\"P(x\u2081 < X < x\u2082) = {p:.2f}\"\n        else:\n            x = \"NA\"\n            z = \"NA\"\n            label = 'Invalid Input'\n\n        html = f\"\"\"\n        <table class='table shiny-table table-hover spacing-s' style='width:auto;'>\n        <thead>\n        <tr>\n            <th style='text-align: center;'> Mean \u03bc </th>\n            <th style='text-align: center;'> Std. Dev. \u03c3 </th>\n            <th style='text-align: center;'> Value(s) </th>\n            <th style='text-align: center;'> Percentile<br>{label} </th>\n            <th style='text-align: center;'> z-Score </th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <td align='center'>{mu}</td>\n            <td align='center'>{sigma}</td>\n            <td align='center'>{x}</td>\n            <td align='center'>{p:.4f}</td>\n            <td align='center'>{z}</td>\n        </tr>\n        </tbody>\n        </table>\n        \"\"\"\n        return ui.HTML(html)\n\n\napp = App(app_ui, server)\n", "type": "text"}]