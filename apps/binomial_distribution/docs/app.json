[{"name": "app.py", "content": "# app.py\n\nfrom shiny import App, ui, reactive, render\nfrom shinywidgets import output_widget, render_widget\nimport plotly.graph_objects as go\nimport numpy as np\nfrom scipy.stats import binom, norm\nimport pandas as pd\n\n# UI Definition\napp_ui = ui.page_fluid(\n    ui.page_navbar(\n        ui.nav_panel(\"Explore\",\n            ui.layout_sidebar(\n                ui.sidebar(\n                    ui.panel_conditional(\n                        \"!input.use_text_input\",\n                        ui.input_slider(\"n_slider\", \"Number of Bernoulli Trials (n)\", min=1, max=100, value=6, step=1),\n                        ui.input_slider(\"p_slider\", \"Probability of Success (p)\", min=0, max=1, value=0.5, step=0.01)\n                    ),\n                    ui.panel_conditional(\n                        \"input.use_text_input\",\n                        ui.input_numeric(\"n_text\", \"Number of Bernoulli Trials (n)\", value=6, min=1, max=100),\n                        ui.input_numeric(\"p_text\", \"Probability of Success (p)\", value=0.5, min=0, max=1, step=0.01)\n                    ),\n                    ui.input_checkbox(\"use_text_input\", \"Enter numbers for n and p\", value=False),\n                    ui.input_checkbox(\"overlay_normal\", \"Overlay Normal Distribution\", value=False),\n                    ui.tags.h4(\"Probability Table:\"),\n                    ui.output_table(\"prob_table\"),\n                    width=500\n                ),\n                output_widget(\"binom_plot\", height=\"500px\")\n            )\n        )\n    )\n)\n\n# Server Logic\ndef server(input, output, session):\n\n    @reactive.Calc\n    def params():\n        n = input.n_text() if input.use_text_input() else input.n_slider()\n        p = input.p_text() if input.use_text_input() else input.p_slider()\n        return int(n), float(p)\n\n    @output\n    @render_widget\n    def binom_plot():\n        n, p = params()\n        x = np.arange(0, n+1)\n        y = binom.pmf(x, n, p)\n\n        fig = go.Figure()\n\n        bar_width = 0.6\n\n        # Use bar chart instead of shapes for interactivity\n        fig.add_trace(go.Bar(\n            selectedpoints=[-1],\n            selected=dict(marker=dict(color='#FF9B3C')),\n            unselected=dict(marker=dict(color='rgba(100, 189, 255, 0.8)')),\n            x=x,\n            y=y,\n            width=[bar_width] * len(x),\n            marker=dict(color='rgba(100, 189, 255, 0.8)'),\n            hovertemplate='x = %{x}<br>P(X=%{x}) = %{y:.4f}<extra></extra>', hoverlabel=dict(bgcolor='#FF9B3C', font_size=14),\n            name='Binomial PMF'\n        ))\n\n        if input.overlay_normal():\n            x_cont = np.linspace(0, n, 500)\n            mu, sigma = n*p, np.sqrt(n*p*(1-p))\n            normal_curve = norm.pdf(x_cont, mu, sigma)\n            fig.add_trace(go.Scatter(x=x_cont, y=normal_curve, mode='lines', name='Normal Distribution', line=dict(color='gray')))\n\n        fig.update_layout(\n            title=f\"Binomial Distribution (n={n}, p={p})\",\n            xaxis_title=\"Number of Successes (x)\",\n            yaxis_title=\"Probability\",\n            margin=dict(l=40, r=40, t=40, b=40),\n            clickmode='event+select'\n            hovermode='closest'\n        )\n        return fig\n\n    @output\n    @render.ui\n    def prob_table():\n        n, p = params()\n        x_vals = np.arange(0, n+1)\n        probs = binom.pmf(x_vals, n, p)\n\n        rows = \"\\n\".join(\n            f\"<tr data-x='{x}'><td align='center'>{x}</td><td align='center'>{prob:.5f}</td></tr>\"\n            for x, prob in zip(x_vals, probs)\n        )\n\n        html = f\"\"\"\n        <table class='table shiny-table table-hover spacing-s' style='width:auto;'>\n        <thead>\n            <tr>\n                <th style='text-align: center;'>x</th>\n                <th style='text-align: center;'>P(X=x)</th>\n            </tr>\n        </thead>\n        <tbody>\n            {rows}\n        </tbody>\n        </table>\n        \"\"\"\n        return ui.HTML(html)\n\nui.tags.script(\"\"\"\n    document.addEventListener(\"shiny:value\", function (e) {\n        if (e.name === \"prob_table\") {\n            const tbls = document.querySelectorAll(\"table.shiny-table\");\n            tbls.forEach((tbl) => {\n                if (!tbl.id) tbl.id = \"prob_table\";\n            });\n        }\n    });\n\n    document.addEventListener(\"DOMContentLoaded\", function () {\n        let lockedIndex = null;\n\n        function clearHighlights() {\n            const table = document.getElementById(\"prob_table\");\n            if (!table) return;\n            [...table.querySelectorAll(\"tbody tr\")].forEach(row => row.style.backgroundColor = \"\");\n        }\n\n        function highlightRow(xval) {\n            const table = document.getElementById(\"prob_table\");\n            if (!table || xval === undefined) return;\n            const row = table.querySelector(`tr[data-x='${xval}']`);\n            if (row) row.style.backgroundColor = \"#FF9B3C55\";\n        }\n            }\n        }\n\n        document.addEventListener(\"plotly_hover\", function (e) {\n            if (lockedIndex !== null) return;\n            const plot = e.target;\n            const pt = e.detail.points[0];\n            Plotly.restyle(plot, {selectedpoints: [pt.pointIndex]}, [0]);\n            highlightRow(pt.x);\n        });\n\n        document.addEventListener(\"plotly_unhover\", function (e) {\n            if (lockedIndex !== null) return;\n            const plot = e.target;\n            Plotly.restyle(plot, {selectedpoints: [-1]}, [0]);\n            clearHighlights();\n        });\n\n        document.addEventListener(\"plotly_click\", function (e) {\n            const plot = e.target;\n            const pt = e.detail.points[0];\n            lockedIndex = pt.pointIndex;\n            Plotly.restyle(plot, {selectedpoints: [pt.pointIndex]}, [0]);\n            highlightRow(pt.x);\n        });\n\n        document.addEventListener(\"keydown\", function (e) {\n            if (e.key === \"Escape\") {\n                lockedIndex = null;\n                const plot = document.querySelector(\".js-plotly-plot\");\n                if (plot) Plotly.restyle(plot, {selectedpoints: [-1]}, [0]);\n                clearHighlights();\n            }\n        });\n            const rows = table.querySelectorAll(\"tbody tr\");\n            for (let row of rows) {\n                const cell = row.cells[0];\n                if (parseInt(cell.textContent.trim()) === xval) {\n                    row.style.backgroundColor = \"#FF9B3C55\";\n                    break;\n                }\n            }\n        });\n\n        document.addEventListener(\"plotly_unhover\", function (e) {\n            const plot = e.target;\n            Plotly.restyle(plot, {selectedpoints: [-1]}, [0]);\n            clearHighlights();\n        });\n    });\n\"\"\"),\n\napp = App(app_ui, server)\n", "type": "text"}]