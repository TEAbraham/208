[{"name": "app.py", "content": "# app.py\n\nfrom shiny import App, ui, reactive, render\nfrom shinywidgets import output_widget, render_widget\nimport plotly.graph_objects as go\nimport numpy as np\nfrom scipy.stats import geom\n\n# UI Definition\napp_ui = ui.page_fluid(\n    ui.panel_title(\"The Geometric Distribution\"),\n    ui.navset_tab(\n        ui.nav_panel(\"Explore Distribution\",\n            ui.layout_sidebar(\n                ui.sidebar(\n                    ui.input_slider(\"p_slider\", \"Probability of Success (p)\", min=0.01, max=0.99, value=0.5, step=0.01),\n                    width=500\n                ),\n                    ui.tags.p(\"The geometric distribution models the number of trials until the first success. The shape is heavily influenced by the probability of success p.\"),\n                    output_widget(\"dist_plot\", height=\"500px\"),\n                    ui.tags.h4(\"Probability Table:\"),\n                    ui.output_ui(\"prob_table\")\n            )\n        ),\n        ui.nav_panel(\"Find Probability\",\n            ui.layout_sidebar(\n                ui.sidebar(\n                    ui.input_numeric(\"prob_p\", \"Probability of Success (p)\", value=0.5, min=0.01, max=0.99, step=0.01),\n                    ui.input_select(\"prob_type\", \"Type of Probability\", choices=[\n                        \"Geometric Probability: P(X = x)\",\n                        \"Lower Tail: P(X < x)\",\n                        \"Upper Tail: P(X > x)\",\n                        \"Interval: P(x\u2081 < X < x\u2082)\"\n                    ]),\n                    ui.panel_conditional(\n                        \"!input.prob_type.includes('Interval')\",\n                        ui.input_numeric(\"x1_prob\", \"Value of x:\", value=5, step=1)\n                    ),\n                    ui.panel_conditional(\n                        \"input.prob_type.includes('Interval')\",\n                        ui.input_numeric(\"x1_prob\", \"x\u2081:\", value=5, step=1),\n                        ui.input_numeric(\"x2_prob\", \"x\u2082:\", value=7, step=1)\n                ),\n                    width=500),\n                    output_widget(\"prob_plot\", height=\"500px\"),\n                    ui.output_ui(\"prob_summary\")\n            )\n        ),\n        ui.nav_panel(\"Find Percentile\",\n            ui.layout_sidebar(\n                ui.sidebar(\n                    ui.input_numeric(\"perc_p\", \"Probability of Success (p)\", value=0.5, min=0.01, max=0.99, step=0.01),\n                    ui.input_select(\"perc_type\", \"Type of Percentile\", choices=[\n                        \"Lower Tail: P(X < x)\",\n                        \"Upper Tail: P(X > x)\",\n                        \"Middle Interval: P(x\u2081 < X < x\u2082)\"\n                    ]),\n                    ui.input_numeric(\"perc_prob\", \"Probability (%)\", value=95, min=0, max=100, step=0.1),\n                    width=500),\n                    output_widget(\"perc_plot\", height=\"500px\"),\n                    ui.output_ui(\"perc_summary\")\n            )\n        )\n    )\n)\n\n# Server Logic\ndef server(input, output, session):\n\n    @output\n    @render_widget\n    def dist_plot():\n        p = input.p_slider()\n        x = np.arange(1, 20)\n        y = geom.pmf(x, p)\n\n        fig = go.Figure()\n        fig.add_trace(go.Bar(\n            x=x,\n            y=y,\n            marker_color=\"#FF9B3C\",\n            hovertemplate=\"x = %{x}<br>P(X = %{x}) = %{y:.4f}<extra></extra>\",\n        ))\n\n        fig.update_layout(\n            title=f\"Geometric Distribution (p={p})\",\n            xaxis_title=\"x\",\n            yaxis_title=\"P(X = x)\",\n            margin=dict(l=40, r=40, t=40, b=40)\n        )\n        return fig\n\n    @output\n    @render.ui\n    def prob_table():\n        p = input.p_slider()\n        x_vals = np.arange(1, 20)\n        probs = geom.pmf(x_vals, p)\n\n        rows = \"\\n\".join(\n            f\"<tr><td align='center'>{x}</td><td align='center'>{prob:.5f}</td></tr>\"\n            for x, prob in zip(x_vals, probs)\n        )\n\n        html = f\"\"\"\n        <table class='table shiny-table table-hover spacing-s' style='width:auto;'>\n        <thead>\n            <tr>\n                <th style='text-align: center;'>x</th>\n                <th style='text-align: center;'>P(X = x)</th>\n            </tr>\n        </thead>\n        <tbody>{rows}</tbody>\n        </table>\n        \"\"\"\n        return ui.HTML(html)\n\n    @output\n    @render_widget\n    def prob_plot():\n        p = input.prob_p()\n        x = np.arange(1, 20)\n        y = geom.pmf(x, p)\n\n        x1 = input.x1_prob()\n        x2 = input.x2_prob() if hasattr(input, 'x2_prob') else None\n        prob_type = input.prob_type()\n\n        fig = go.Figure()\n        fig.add_trace(go.Bar(x=x, y=y, marker_color=\"#eee\"))\n\n        highlight = np.zeros_like(y)\n        if \"Geometric Probability\" in prob_type:\n            if 1 <= x1 <= 20:\n                highlight[int(x1)-1] = y[int(x1)-1]\n        elif \"Lower\" in prob_type:\n            mask = x < x1\n            highlight[mask-1] = y[mask-1]\n        elif \"Upper\" in prob_type:\n            mask = x > x1\n            highlight[mask-1] = y[mask-1]\n        elif \"Interval\" in prob_type:\n            mask = (x > x1) & (x < x2)\n            highlight[mask-1] = y[mask-1]\n\n        fig.add_trace(go.Bar(\n            x=x,\n            y=highlight,\n            marker_color=\"#FF9B3C\",\n            name=\"Highlighted\"\n        ))\n\n        fig.update_layout(\n            title=\"Geometric Probability Visualization\",\n            xaxis_title=\"x\",\n            yaxis_title=\"P(X = x)\",\n            showlegend=False\n        )\n        return fig\n\n    @output\n    @render.ui\n    def prob_summary():\n        p = input.prob_p()\n        x1 = input.x1_prob()\n        x2 = input.x2_prob() if hasattr(input, 'x2_prob') else None\n        prob_type = input.prob_type()\n\n        if \"Geometric Probability\" in prob_type:\n            result = geom.pmf(x1, p)\n            msg = f\"P(X = {x1}) = {result:.4f}\"\n        elif \"Lower\" in prob_type:\n            result = geom.cdf(x1 - 1, p)\n            msg = f\"P(X < {x1}) = {result:.4f}\"\n        elif \"Upper\" in prob_type:\n            result = 1 - geom.cdf(x1, p)\n            msg = f\"P(X > {x1}) = {result:.4f}\"\n        elif \"Interval\" in prob_type:\n            result = geom.cdf(x2 - 1, p) - geom.cdf(x1, p)\n            msg = f\"P({x1} < X < {x2}) = {result:.4f}\"\n        else:\n            msg = \"Invalid selection.\"\n\n        return ui.tags.p(msg)\n\n    @output\n    @render_widget\n    def perc_plot():\n        p = input.perc_p()\n        prob = input.perc_prob() / 100\n        perc_type = input.perc_type()\n\n        x = np.arange(1, 20)\n        y = geom.pmf(x, p)\n\n        fig = go.Figure()\n        fig.add_trace(go.Bar(x=x, y=y, marker_color=\"#eee\"))\n\n        if \"Lower\" in perc_type:\n            x_val = np.argmax(geom.cdf(x, p) >= prob)\n            bar_colors = [\"#FF9B3C\" if i <= x_val else \"#eee\" for i in range(len(x))]\n        elif \"Upper\" in perc_type:\n            x_val = np.argmax(geom.cdf(x, p) >= 1 - prob)\n            bar_colors = [\"#FF9B3C\" if i >= x_val else \"#eee\" for i in range(len(x))]\n        elif \"Middle\" in perc_type:\n            low_tail = (1 - prob) / 2\n            low_x = np.argmax(geom.cdf(x, p) >= low_tail)\n            high_x = np.argmax(geom.cdf(x, p) >= 1 - low_tail)\n            bar_colors = [\"#FF9B3C\" if low_x <= i <= high_x else \"#eee\" for i in range(len(x))]\n        else:\n            bar_colors = [\"#eee\"] * len(x)\n\n        fig.data[0].marker.color = bar_colors\n        fig.update_layout(\n            title=\"Percentile Range Highlight\",\n            xaxis_title=\"x\",\n            yaxis_title=\"P(X = x)\",\n            showlegend=False\n        )\n        return fig\n\n    @output\n    @render.ui\n    def perc_summary():\n        p = input.perc_p()\n        prob = input.perc_prob() / 100\n        perc_type = input.perc_type()\n        x = np.arange(1, 20)\n\n        if \"Lower\" in perc_type:\n            val = np.argmax(geom.cdf(x, p) >= prob) + 1\n            msg = f\"x such that P(X < x) \u2248 {prob:.2%} is x = {val}\"\n        elif \"Upper\" in perc_type:\n            val = np.argmax(geom.cdf(x, p) >= 1 - prob) + 1\n            msg = f\"x such that P(X > x) \u2248 {prob:.2%} is x = {val}\"\n        elif \"Middle\" in perc_type:\n            low_tail = (1 - prob) / 2\n            low = np.argmax(geom.cdf(x, p) >= low_tail) + 1\n            high = np.argmax(geom.cdf(x, p) >= 1 - low_tail) + 1\n            msg = f\"x values such that P(x\u2081 < X < x\u2082) \u2248 {prob:.2%} are x \u2208 [{low}, {high}]\"\n        else:\n            msg = \"Invalid input.\"\n\n        return ui.tags.p(msg)\n\n\napp = App(app_ui, server)\n", "type": "text"}]