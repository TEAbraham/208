[{"name": "app.py", "content": "# app_geometric.py\n\nfrom shiny import App, ui, reactive, render\nfrom shinywidgets import output_widget, render_widget\nimport plotly.graph_objects as go\nimport numpy as np\nfrom scipy.stats import geom\nimport pandas as pd\n\napp_ui = ui.page_fluid(\n    ui.page_navbar(\n        ui.nav_panel(\"Explore Geometric Distribution\",\n            ui.layout_sidebar(\n                ui.sidebar(\n                    ui.panel_conditional(\n                        \"!input.use_text_input\",\n                        ui.input_slider(\"max_trials\", \"Maximum Trials to Show\", min=5, max=100, value=20, step=1),\n                        ui.input_slider(\"p_slider\", \"Probability of Success (p)\", min=0.01, max=1, value=0.3, step=0.01)\n                    ),\n                    ui.panel_conditional(\n                        \"input.use_text_input\",\n                        ui.input_numeric(\"max_trials_text\", \"Maximum Trials to Show\", value=20, min=1, max=100),\n                        ui.input_numeric(\"p_text\", \"Probability of Success (p)\", value=0.3, min=0.01, max=1, step=0.01)\n                    ),\n                    ui.input_checkbox(\"use_text_input\", \"Enter numbers for trials and p\", value=False),\n                    ui.tags.h4(\"Probability Table:\"),\n                    ui.output_ui(\"geom_table\"),\n                    width=500\n                ),\n                output_widget(\"geom_plot\", height=\"500px\")\n            )\n        )\n    )\n)\n\ndef server(input, output, session):\n\n    @reactive.Calc\n    def params():\n        max_trials = input.max_trials_text() if input.use_text_input() else input.max_trials()\n        p = input.p_text() if input.use_text_input() else input.p_slider()\n        return int(max_trials), float(p)\n\n    @output\n    @render_widget\n    def geom_plot():\n        max_trials, p = params()\n        x = np.arange(1, max_trials+1)\n        y = geom.pmf(x, p)\n\n        fig = go.Figure()\n\n        fig.add_trace(go.Bar(\n            selectedpoints=[-1],\n            selected=dict(marker=dict(color='#FF9B3C')),\n            unselected=dict(marker=dict(color='rgba(100, 189, 255, 0.8)')),\n            x=x,\n            y=y,\n            width=[0.6] * len(x),\n            marker=dict(color='rgba(100, 189, 255, 0.8)'),\n            hovertemplate='x = %{x}<br>P(X=%{x}) = %{y:.4f}<extra></extra>',\n            hoverlabel=dict(bgcolor='#FF9B3C', font_size=14),\n            name='Geometric PMF'\n        ))\n\n        fig.update_layout(\n            title=f\"Geometric Distribution (p={p})\",\n            xaxis_title=\"Trial of First Success (x)\",\n            yaxis_title=\"Probability\",\n            margin=dict(l=40, r=40, t=40, b=40),\n            hovermode='closest',\n            clickmode='event+select'\n        )\n        return fig\n\n    @output\n    @render.ui\n    def geom_table():\n        max_trials, p = params()\n        x_vals = np.arange(1, max_trials+1)\n        probs = geom.pmf(x_vals, p)\n\n        rows = \"\\n\".join(\n            f\"<tr data-x='{x}'><td align='center'>{x}</td><td align='center'>{prob:.5f}</td></tr>\"\n            for x, prob in zip(x_vals, probs)\n        )\n\n        html = f\"\"\"\n        <table class='table shiny-table table-hover spacing-s' style='width:auto;'>\n        <thead>\n            <tr>\n                <th style='text-align: center;'>x</th>\n                <th style='text-align: center;'>P(X=x)</th>\n            </tr>\n        </thead>\n        <tbody>\n            {rows}\n        </tbody>\n        </table>\n        \"\"\"\n        return ui.HTML(html)\n\n    ui.tags.script(\"\"\"\n    document.addEventListener(\"shiny:value\", function (e) {\n        if (e.name === \"geom_table\") {\n            const tbls = document.querySelectorAll(\"table.shiny-table\");\n            tbls.forEach((tbl) => {\n                if (!tbl.id) tbl.id = \"geom_table\";\n            });\n        }\n    });\n\n    document.addEventListener(\"DOMContentLoaded\", function () {\n        let lockedIndex = null;\n\n        function clearHighlights() {\n            const table = document.getElementById(\"geom_table\");\n            if (!table) return;\n            [...table.querySelectorAll(\"tbody tr\")].forEach(row => row.style.backgroundColor = \"\");\n        }\n\n        function highlightRow(xval) {\n            const table = document.getElementById(\"geom_table\");\n            if (!table || xval === undefined) return;\n            const row = table.querySelector(`tr[data-x='${xval}']`);\n            if (row) row.style.backgroundColor = \"#FF9B3C55\";\n        }\n\n        document.addEventListener(\"plotly_hover\", function (e) {\n            if (lockedIndex !== null) return;\n            const plot = e.target;\n            const pt = e.detail.points[0];\n            Plotly.restyle(plot, {selectedpoints: [pt.pointIndex]}, [0]);\n            highlightRow(pt.x);\n        });\n\n        document.addEventListener(\"plotly_unhover\", function (e) {\n            if (lockedIndex !== null) return;\n            const plot = e.target;\n            Plotly.restyle(plot, {selectedpoints: [-1]}, [0]);\n            clearHighlights();\n        });\n\n        document.addEventListener(\"plotly_click\", function (e) {\n            const plot = e.target;\n            const pt = e.detail.points[0];\n            lockedIndex = pt.pointIndex;\n            Plotly.restyle(plot, {selectedpoints: [pt.pointIndex]}, [0]);\n            highlightRow(pt.x);\n        });\n\n        document.addEventListener(\"keydown\", function (e) {\n            if (e.key === \"Escape\") {\n                lockedIndex = null;\n                const plot = document.querySelector(\".js-plotly-plot\");\n                if (plot) Plotly.restyle(plot, {selectedpoints: [-1]}, [0]);\n                clearHighlights();\n            }\n        });\n    });\n    \"\"\")\n\napp = App(app_ui, server)\n", "type": "text"}]