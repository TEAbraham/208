[{"name": "app.py", "content": "# app.py\n\nfrom shiny import App, ui, reactive, render\nfrom shinywidgets import output_widget, render_widget\nimport plotly.graph_objects as go\nimport numpy as np\nfrom scipy.stats import binom, norm\nimport pandas as pd\n\napp_ui = ui.page_fluid(\n    ui.panel_title(\"Binomial Distribution Explorer\"),\n    ui.page_navbar(\n        ui.nav_panel(\"Explore\",\n            ui.layout_sidebar(\n                ui.sidebar(\n                    ui.input_checkbox(\"use_text_input\", \"Enter numbers for n and p\", value=False),\n                    ui.panel_conditional(\n                        \"!input.use_text_input\",\n                        ui.input_slider(\"n_slider\", \"Number of Bernoulli Trials (n)\", min=1, max=100, value=6, step=1),\n                        ui.input_slider(\"p_slider\", \"Probability of Success (p)\", min=0, max=1, value=0.5, step=0.01)\n                    ),\n                    ui.panel_conditional(\n                        \"input.use_text_input\",\n                        ui.input_numeric(\"n_text\", \"Number of Bernoulli Trials (n)\", value=6, min=1, max=100),\n                        ui.input_numeric(\"p_text\", \"Probability of Success (p)\", value=0.5, min=0, max=1, step=0.01)\n                    ),\n                    ui.input_checkbox(\"overlay_normal\", \"Overlay Normal Distribution\", value=False),\n                    ui.tags.h4(\"Probability Table:\"),\n                    ui.output_table(\"prob_table\")\n                ),\n\n            output_widget(\"binom_plot\", height=\"600px\")\n\n\n            )\n        )\n    )\n)\n\ndef server(input, output, session):\n\n    @reactive.Calc\n    def params():\n        n = input.n_text() if input.use_text_input() else input.n_slider()\n        p = input.p_text() if input.use_text_input() else input.p_slider()\n        return int(n), float(p)\n\n    @output\n    @render_widget\n    def binom_plot():\n        n, p = params()\n        x = np.arange(0, n+1)\n        y = binom.pmf(x, n, p)\n        fig = go.Figure()\n        fig.add_trace(go.Bar(x=x, y=y, name='Binomial Probabilities'))\n\n        if input.overlay_normal():\n            x_cont = np.linspace(0, n, 500)\n            mu, sigma = n*p, np.sqrt(n*p*(1-p))\n            normal_curve = norm.pdf(x_cont, mu, sigma)\n            fig.add_trace(go.Scatter(x=x_cont, y=normal_curve, mode='lines', name='Normal Distribution'))\n\n        fig.update_layout(\n            title=f\"Binomial Distribution (n={n}, p={p})\",\n            xaxis_title=\"Number of Successes (x)\",\n            yaxis_title=\"Probability\",\n            margin=dict(l=40, r=40, t=40, b=40)\n        )\n        return fig\n\n    @output\n    @render.table\n    def prob_table():\n        n, p = params()\n        x_vals = np.arange(1, n+1)\n        probs = binom.pmf(x_vals, n, p)\n        df = pd.DataFrame({\"x\": x_vals, \"P(X=x)\": np.round(probs, 5)})\n        return df\n\napp = App(app_ui, server)\n", "type": "text"}]