---
title: "Interactive Discrete Distributions"
format: html
execute: 
  enabled: true
ojs: true
---

```{ojs}
//| echo: false
// Load modules safely inside a single cell
Plot = await require("@observablehq/plot@0.6")
Inputs = await require("@observablehq/inputs@0.10")
d3 = await import("https://cdn.jsdelivr.net/npm/d3@7/+esm")
```

# Binomial Distribution

```{ojs}
//| echo: false
viewof binom_n = Inputs.range([1, 50], {value: 10, step: 1, label: "Number of Trials (n)"})
viewof binom_p = Inputs.range([0.01, 1], {value: 0.5, step: 0.01, label: "Probability of Success (p)"})
```

```{ojs}
//| echo: false
function factorial(n) {
  return n <= 1 ? 1 : n * factorial(n - 1);
}

function binomialPMF(n, p, k) {
  const coeff = factorial(n) / (factorial(k) * factorial(n - k));
  return coeff * Math.pow(p, k) * Math.pow(1 - p, n - k);
}

Plot.plot({
  height: 300,
  marks: [
    Plot.barY(
      d3.range(0, binom_n + 1).map(k => ({
        x: k,
        y: binomialPMF(binom_n, binom_p, k),
        tooltip: `P(X=${k}) = ${binomialPMF(binom_n, binom_p, k).toFixed(3)}`
      })),
      {
        x: "x",
        y: "y",
        fill: "#64bdff",
        title: "tooltip",
        stroke: "#003366",
        strokeWidth: 1
      }
    ),
    Plot.ruleY([0])
  ],
  x: {label: "Number of Successes"},
  y: {label: "Probability", domain: [0, 1]}
})
```

# Geometric Distribution

```{ojs}
//| echo: false
viewof geom_p = Inputs.range([0.01, 1], {value: 0.3, step: 0.01, label: "Probability of Success (p)"})
viewof geom_max_trials = Inputs.range([1, 50], {value: 15, step: 1, label: "Max Number of Trials"})
```

```{ojs}
//| echo: false
function geometricPMF(p, k) {
  return Math.pow(1 - p, k - 1) * p;
}

Plot.plot({
  height: 300,
  marks: [
    Plot.barY(
      d3.range(1, geom_max_trials + 1).map(k => ({
        x: k,
        y: geometricPMF(geom_p, k),
        tooltip: `P(X=${k}) = ${geometricPMF(geom_p, k).toFixed(3)}`
      })),
      {
        x: "x",
        y: "y",
        fill: "#FF9B3C",
        title: "tooltip",
        stroke: "#7a3e00",
        strokeWidth: 1
      }
    ),
    Plot.ruleY([0])
  ],
  x: {label: "Trial of First Success"},
  y: {label: "Probability", domain: [0, 1]}
})
```
